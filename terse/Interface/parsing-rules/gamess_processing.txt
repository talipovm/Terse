# [PROCESSING RULES]

mplevl=0 -> mplevl=empty
last_value(mplevl) -> wf_mp
nonempty(wf_mp) -> wftype

cityp=NONE -> cityp=empty
last_value(cityp) -> wf_cityp
nonempty(wf_cityp) -> wftype

cctyp=NONE -> cctyp=empty
last_value(cctyp) -> wf_cctyp
nonempty(wf_cctyp) -> wftype

hssend=T -> runtyp=freq
dft=NONE -> dft=empty
last_value(dft) -> wf_dft
nonempty(wf_dft) -> wftype

ndftb=2 -> wftype=DFTB2
ndftb=3 -> wftype=DFTB3

fmo_level=2 -> wftype_fragment='FMO2'
fmo_level=3 -> wftype_fragment='FMO3'

lcdftb=True -> wftype='LC-DFTB2 (or 3)'
gbasis=DFTB -> SCF_energy=empty
dftb_energy -> final_SCF_energy
nonempty(SCF_energy) -> final_SCF_energy
last_value(final_SCF_energy) -> P_scf_e

gbasis=DFTB -> gbasis='minimal basis set'
runtyp=ENERGY -> JobType=sp

tddft=T -> JobType='TD-DFT'

last_value(new_step) -> opt_iter
# runtyp=XXX -> JobType=irc
# runtyp=XXX -> JobType=scan
# runtyp=XXX -> JobType=td
# runtyp=freq -> JobType=freq
runtyp=OPTIMIZE -> JobType=opt
runtyp=freq -> JobType=freq

last_value(solvent) -> P_solvent
last_value(solv_model) -> P_solv_model
last_value(sym) -> P_sym
last_value(charge) -> P_charge
last_value(mult) -> P_mult
scftype=UHF -> P_open_shell=True
    
ccsd_pTp_energy -> P_ccsd_pTp_energy
T1_diagnostic -> P_T1_diagnostic
# XXX -> frozen # geometrical parameters
# XXX -> uv # (lambda, fosc pairs)
# latest(new_step) -> opt_iter
# 
#charges -> atprops

is_geom_ang='True' -> geom_bohr='empty' # if geometry is available in Angstroms, ignore that in bohrs
nonempty(geom_bohr) -> geom            # if geometry in Bohrs was not ignored, use it

scf_notconv -> P_scf_notconv
scf_progress -> P_scf_progress

S2 -> P_S2

opt_ok -> P_opt_ok
geom_bohr -> P_geom_bohr
geom -> P_geom
max_force -> P_max_force
rms_force -> P_rms_force
vibrations -> P_vibrations # vibration vectors
freqs -> P_freqs # in cm-1

thermo_temp -> P_thermo_temp
thermo_e_corr -> P_thermo_e_corr
thermo_h_corr -> P_thermo_h_corr
thermo_g_corr -> P_thermo_g_corr
thermo_units -> P_thermo_units

term_ok -> P_term_ok
join_unique(JobType) -> P_jobtype
wftype -> P_wftype
gbasis -> P_basis
wftype_fragment -> P_wftype_fragment # e.g. FMO

aggregate_before(scan) -> scan # use new_step as separator for the geometry optimization steps
aggregate_before(irc) -> irc # use new_step as separator for the geometry optimization steps
aggregate_before(new_step) -> opt # use new_step as separator for the geometry optimization steps
join_unique(new_step) -> steps

# vim: filetype=R
